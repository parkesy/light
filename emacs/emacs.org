In this document I plan to have my current working .emacs file. This will be important for people who actually want to run my .org files and see the output for themselves.

#+begin_src sh :results output
cp ~/.emacs ~/light/emacs/.emacs
#+end_src 

#+begin_src sh :results output
cat ~/.emacs
#+end_src

#+RESULTS:
#+begin_example
;; package manager set up
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list `package-archives '("gnu" . "http://elpa.gnu.org/packages/"))

; Must have org-mode loaded before we can configure org-babel
(require 'org-install)

; Some initial langauges we want org-babel to support
(setq org-ditaa-jar-path "/usr/bin/ditaa")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sqlite . t)
   (C . t)
   (perl . t)
   (sml . t)))

(setq org-src-fontify-natively t)

;; Let images be displayed inplace
;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]") 1))
;; add a hook so we can display images on load
  (add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
  (set-face-underline-p 'org-link nil)
  (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))

;; nice theme -- look at custimize-themes for others
(load-theme 'wheatgrass)

;; Powerline setup
(require 'powerline)
(powerline-default-theme)
;;(setq powerline-arrow-shape 'arrow)   ;; the default
(setq powerline-color1 "#222")      ;; dark grey; 
(setq powerline-color2 "#444")      ;; slightly lighter grey
(setq powerline-arrow-shape 'slant-left)   ;; give your mode-line curves

;; SMEX set up
(setq smex-save-file "~/.emacs.d/smex.save") ;; keep my ~/ clean
(require 'smex) 
(smex-initialize)
(global-set-key (kbd "M-X") 'smex)

;; -*- mode: elisp -*-

;; c++ configuration
(require 'cc-mode)
(setq-default c-basic-offset 4 c-default-style "linux")
(setq-default tab-width 4 indent-tabs-mode t)
(define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
(require 'autopair)
(autopair-global-mode 1)
(setq autopair-autowrap t)
(require 'auto-complete-clang-async)
(define-key c++-mode-map (kbd "C-S-<return>") 'ac-complete-clang)

;; Disable the splash screen (to enable it agin, replace the t with 0)
(setq inhibit-splash-screen t)

;; Enable transient mark mode
(transient-mark-mode 1)

;;;; org-mode configuration  
(add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

(setq org-agenda-files (quote ("~/org/")))
(setq org-agenda-files (quote ("~/light/")))

;; Enable org-mode
(require 'org)
;; Make org-mode work with files ending in .org
;; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;; The above is the default in recent emacsen
(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

(defun do-org-show-all-inline-images ()
  (interactive)
  (org-display-inline-images t t))

;;;; Spell check
(setq ispell-dictionary "british")
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'find-file-hooks 'flyspell-mode)

(require 'htmlize)

;; ESS emacs speaks statistics
;; http://www.math.montana.edu/stat/tutorials/R.html
(require 'ess-site)

;; VIM
(require 'evil)
(evil-mode 1)
#+end_example
