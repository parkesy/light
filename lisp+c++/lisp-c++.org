In this document I'll be trying to write a lisp interpreter in c++. My end goal will be write this in static code but for the moment I need to understand how the basic dynamic version works...

* What is Lisp?
Lisp is an interpreted programming language. This means that the developer write a program it is parsed then turned into some code that can be executed on the fly and then is executed. 

You'll be seeing some examples of Lisp grammer shortly

* What do we need to interpret?
We need to build a prefix interpreter. Something that can take an expresion such as (+ 1 3 6) and give the answer 10. See how the operation came before the operands, this is prefix.

** Forms
| Form               | Syntax                | Semantics                                            |
|--------------------+-----------------------+------------------------------------------------------|
| Variable Reference | var                   |                                                      |
| constant literal   | number                |                                                      |
| quotation          | (quote exp)           | return the exp literally. No Eval                    |
| conditional        | (if test conseq alt)  | if test is true then we return conseq else alt       |
| assignment         | (set! var exp)        | sets var equal to exp. exp must be defined           |
| definition         | (define var exp)      | define a new variable and give it the value exp      |
| procedure          | (lambda (var...) exp) | Create a procedure with parameters(s) named var...   |
|                    |                       | and the expression as the body. (lambda (d) (* d d)) |
| sequencing         | (begin exp...)        | Eval each of the expression in left to right order   |
|                    |                       | and return the final value.                          |
| procedure call     | (proc exp...)         |                                                      |

* C++ Evaluation of forms

#+begin_src C++ :tangle yes :tangle src/lisp/eval.hpp :main no
#pragma once

#include <exception>
#include <map>

struct Environment;

struct Sexp
{
    virtual Sexp Evaluate(Environment& env) = 0;
};
using SexpPtr = std::unique<Sexp>;

struct Symbol : Sexp 
{
    virtual Sexp Evaluate(Environment& env) { return env.find(mValue); }
};

struct Number : Sexp 
{
    virtual Sexp Evaluate(Environment& env) { return mValue; }
    std::string mValue;
};

SexpPtr CreateSymbolOrNumber(const std::string&)
{
    
}

struct List : Sexp 
{
    virtual Sexp Evaluate(Environment& env)
    {
        throw std::runtime_error("Not implemented"); 
    }
};

struct Procedure : Sexp { };
struct Lambda : Sexp { };

struct Environment
{
    Environment() = default;
    Environment(Environment& other) : mOtherEnv(&other) {}

    using MemoryType = std::map<std::string, SexpPtr>;
    MemoryType mValues;
    Environment* mOtherEnv{nullptr};

    SexpPtr find(std::string& token)
    {
        const auto& itr = mValues.find(token);
        if (itr == mValues.end())
            if (mOtherEnv)
                return mOtherEnv->find(token)
            else
                throw std::runtime_error("No symbol defined");

        return itr->second;
    }
}

template <typename Sexp, typename GlobalEnvType>
Sexp Evaluate (Sexp&& expression, GlobalEnvType&& environment)
{
   expression.Evaluate(environment);
}

void Process(const std::string& in, Environment& e)
{
    std::list<std::string> tokens(tokenize(s));
    Process(tokens, e);
}

void Process(const std::list<std::strings>& tokens, Environment& e)
{
    std::list<std::string> tokens(tokenize(s));
    
    auto tmp(tokens.pop_front());
    if (tmp == "(")
    {
        ListPtr list(new List());
        while (tokens.front() != ")")
            list->push_back(Process(tokens, e));
    }
    else
        return CreateSymbolOrNumber(tmp);
}
#+end_src

#+RESULTS:


#+begin_src C++ :flags -std=c++11 :tangle yes :tangle src/lisp/test-eval.cpp :main no
int main()
{

   Environment e;
   Process("(set! t 1)", e);
   Process("(set! f 0)", e);
   Process("(set! nil \"nil\")", e);

}
#+end_src

#+RESULTS:

