This document will describe the R function called Map.

* Introducing Map
Map is an R function that takes:
- as its first argument, a unary function
#+begin_src R
function(arg) {}
#+end_src 
- as its second argument, a vector

It applies the given function to each element of the given vector. 

For example

#+begin_src R :results output
Map(function(elm) elm + 1, seq(1,5))
#+end_src

#+RESULTS:
#+begin_example
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4

[[4]]
[1] 5

[[5]]
[1] 6
#+end_example

I really don't like the fact that Map produces this output: a list of list. Its pretty crap. I usually put unlist on the result to fix this up, but is a real pain.

#+begin_src R :results output
unlist(Map(function(elm) elm + 1, seq(1,5)))
#+end_src

#+RESULTS:
: [1] 2 3 4 5 6

Map is really useful when you want to loop over a vector and do a number of things. I've used it in the past for automatic graph plotting.

Just remember you can do anything you want in the function you provide.

** What happens when you provide a matrix to map
It wasn't obvious to me what would happen. its still quite annoying

#+begin_src R :results output
a <- matrix(seq(1,4), ncol=2)
Map(function(a) a, a)
#+end_src

#+RESULTS:
#+begin_example
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

#+end_example

So it treats the matrix as a vector; i.e. Map(f, unlist(matrix))... I was hoping for the matrix to be split column or row wise and get a column or row wise vector as the parameter to my provided function. 

To try and achieve that functionality was can use the *apply functions. Or was can do this:
#+begin_src R :results output
a <- matrix(seq(1,4), ncol=2)
Map(function(arg) a[arg,], seq(1, nrow(a))) 
#+end_src

#+RESULTS:
: [[1]]
: [1] 1 3
: 
: [[2]]
: [1] 2 4
: 

So now we have a list of column wise lists of the original matrix. I'm hoping that its obvious that we could simply wrap this in a function and to recreate mapply. 

#+begin_src R :results output
myColumnMap <- function(f, m)
    Map(f, Map(function(arg) a[arg,], seq(1, nrow(m)))) 

a <- matrix(seq(1,4), ncol=2)
myColumnMap(function(x) summary(x), a)
#+end_src

#+RESULTS:
: [[1]]
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:     1.0     1.5     2.0     2.0     2.5     3.0 
: 
: [[2]]
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:     2.0     2.5     3.0     3.0     3.5     4.0 

As a developer I find that its good to use the base functions or R. It gives you an nice understanding of how the more complicated *apply functions work.

** What happens when you use a Dataframe with Map
The application of Map on a data frame yields a different result to the matrix application. Map on a dataframe will do a column wise application of the provided function.

Here is a quick test
#+begin_src R :results output
d <- data.frame(a=seq(1,9), b=as.character(seq(11,19)))
Map(function(x) x, d)
#+end_src

#+RESULTS:
: $a
: [1] 1 2 3 4 5 6 7 8 9
: 
: $b
: [1] 11 12 13 14 15 16 17 18 19
: Levels: 11 12 13 14 15 16 17 18 19
: 

