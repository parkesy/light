In this document I'm going to show the importance of integrating R and C++.

* Whats the problem?
I've heard a lot of people say that R is really really really slow. 

#+begin_src R :results output table
a <- rep(1, 300000000)
system.time(min(a,1))
#+end_src  

#+RESULTS:
:    user  system elapsed 
:   1.724   0.000   1.724 


Now lets do the same in c++. 
#+begin_src R :results output table 
library('inline')
library('Rcpp')
a <- rep(1, 300000000)
src <- '
    Rcpp::NumericVector x(xs);
    Rcpp::NumericVector::iterator it =       // iterator type
        std::min_element(x.begin(), x.end());  // STL algo
    return Rcpp::wrap(*it);'
minfun <- cxxfunction(signature(xs="numeric"), body=src, plugin="Rcpp")

system.time(minfun(a))
#+end_src  

#+RESULTS:
:    user  system elapsed 
:   1.440   0.000   1.439 

So we had some gain in performance approximately 16% improvement. That is pure improvement if you ignore the compilation step.

So lets not ignore that. How much is it really costing us?

#+begin_src R :results output table 
library('inline')
library('Rcpp')
a <- rep(1, 300000000)

compPlusExec <- function(a)
{
    src <- '
    Rcpp::NumericVector x(xs);
    Rcpp::NumericVector::iterator it =       // iterator type
        std::min_element(x.begin(), x.end());  // STL algo
    return Rcpp::wrap(*it);'
    minfun <- cxxfunction(signature(xs="numeric"), body=src, plugin="Rcpp")
    minfun(a)
}

system.time(compPlusExec(a))
#+end_src  

#+RESULTS:
:    user  system elapsed 
:   3.172   0.088   3.253

That is really an 86% decrease in run time. Compile time approximately 3.172 - 1.440 = 

** Is R really slow?
The message, from the above tests, is that if you want to run c++ and R together the functions that you are specialising with c++ need to be compiled once then set into a function and that function _needs_ to be called a lot in order to compensate for the time lost to compilation.


Formula to figure out if you should be optimising with c++. Assuming all of the above tests scale linearly... which I'm confident they wouldn't. But lets just do this for fun. 
#+begin_src R :results graphics :file img/rcpp-rvcpp.jpg
ShouldIOptimise <- function (RFunctionExecTime, numberOfTimesUsed)
{
    # We are assumming that we will always get avg perfromance gain of 17% 
    cppRunTime = RFunctionExecTime - RFunctionExecTime * 0.17;
    
    # we are assuming that compilation will take 120% longer than running the function
    cppCompTime = cppRunTime * 1.2

    return (data.frame(
        optimise=((RFunctionExecTime * numberOfTimesUsed) > (cppCompTime + cppRunTime * numberOfTimesUsed)), 
        Rtime=(RFunctionExecTime * numberOfTimesUsed),
        cppTotal=(cppCompTime + cppRunTime * numberOfTimesUsed)))
}

result <- Map(function(x) ShouldIOptimise(1.724, x), seq(1,10))

df.results <- data.frame(
    opt=unlist(Map(function(x) x[,1], result)),
    rtime=unlist(Map(function(x) x[,2], result)),
    cpptime=unlist(Map(function(x) x[,3], result)))

plot(df.results$rtime, type="l", main="Mock R vs Rcpp time cost*", col="blue", ylab="seconds", xlab="function calls")
lines(df.results$cpptime, col="red")
legend("topleft", legend = c("R time", "C++ time"), col=c("blue", "red"), pch="l")
grid()
#+end_src

#+RESULTS:
[[file:img/rcpp-rvcpp.jpg]]


*Remember this is not an accurate model to base your decisions off. You'll need to quickly test your c++ functions vs the equivalent R function to best make an informed decision. Its very likely that as the complexity of the function increases R execution time will reduce and gains from c++ implementation will start to really out perform. 
