* Function return type deduction									  :Cpp14:
This is a feature I'm really excited about. This has been needed for a long long long time! 

If you use the auto key word as the return type the compiler will determine what the return type is. This is critical step forward for the readability and maintainability of template code. 


#+begin_src C++ :flags --std=c++14
#include <iostream>

template <typename T, typename L, typename... Args>
auto Reduce(T operation, L&& lhs,  Args... args)
{
    return operation(lhs, 
        Reduce(operation, std::forward<Args>(args)...));
}

template <typename T, typename L, typename R>
auto Reduce(T operation, L&& lhs, R&& rhs)
{
    return operation(lhs, rhs);
}

int main()
{
    auto add = [](auto&& lhs, auto&& rhs) { return lhs + rhs; };
    auto multi = [](auto&& lhs, auto&& rhs) { return lhs * rhs; };

    std::cout << Reduce(add, 1.2, 3.7, 'a', Reduce(multi, 3, 6, 9.9)) << std::endl;
}
#+end_src

#+RESULTS:
: 280.1

The above example is ridiculously complicated to write in C++11. I've had to write/support the longer c++11 version once for a project and it is not at all pretty. 
