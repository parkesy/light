This document will export the C++ development idiom that is called Pimpl. If your thinking WTF is Pimpl, think Pointer to Implementation.

Here is a simple example.
#+begin_src C++ :tangle yes :tangle src/sampleToy.hpp :main no
#pragma once
#include <memory> 
// toy.hpp

class Toy
{
private:
    class Impl;
    Impl* mImpl;
public:
    Toy();
    void Do();
};
#+end_src

#+begin_src C++ :tangle yes :tangle src/sampleToy.cpp :main no 
#include "sampleToy.hpp"
// Toy.cpp

class Toy::Impl
{
public:
    void Do() { /* STUFF */ }
};

Toy::Toy() : mImpl(new Toy::Impl()) {}
void Toy::Do() { mImpl->Do(); }
#+end_src
People who have talked to me about this Idiom tout it as a method to hide implementation away a cpp file and increase security. I'm really not that sure about this... What are you really hiding? and what is the cost?

*Update* Recently I had a friend that created a coding challenge. The challenge was to write a bot that would solve a game of probability. The issue was that the die results were not evenly distributed in fact the distribution was determined randomly each round of the game. Anyway, he implemented his game engine not using the Pimpl method and as a result it was easy for me to cheat. As a developer with hundreds and thousands of hours programming experience, I'm not going to compete with this guy where he is strongest, I'm use my development skills... I'm going to break his framework. *If he had of use pimpl idiom it would have been _harder_ for me to break his game*.

What security are we gaining? security via obscurity. Its an added level of complexity that the developer will need to compensate for, it could be the difference between someone dynamic_casting the interface away, to someone needing do decompile object files, or binaries. One is clearly easier, and other takes more time and skill. The question will always be is the cost of allocation/deallocation worth the performance penalty.  
 
